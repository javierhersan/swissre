using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        if (args.Length < 2)
        {
            Console.WriteLine("Usage: vulnerability-cli --file {JSON_FILE} --url {API_URL}");
            return;
        }

        string filePath = args[1];
        string apiUrl = args[3];

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Error: JSON file not found.");
            return;
        }

        try
        {
            string jsonContent = await File.ReadAllTextAsync(filePath);
            var vulnerabilities = JsonSerializer.Deserialize<VulnerabilityData>(jsonContent);

            if (vulnerabilities?.Vulnerabilities == null)
            {
                Console.WriteLine("Error: Invalid JSON format.");
                return;
            }

            using HttpClient client = new HttpClient();

            foreach (var vulnerability in vulnerabilities.Vulnerabilities)
            {
                try
                {
                    string json = JsonSerializer.Serialize(vulnerability);
                    HttpContent content = new StringContent(json, Encoding.UTF8, "application/json");
                    HttpResponseMessage response = await client.PostAsync(apiUrl, content);
                    Console.WriteLine(response);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Failed to upload CVE: {vulnerability.Cve} - {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing CVE: {vulnerability.Cve} - {ex.Message}");
                }
            }

            Console.WriteLine("Upload completed.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading file: {ex.Message}");
        }
    }
}

public class VulnerabilityData
{
    [JsonPropertyName("vulnerabilities")]
    public List<Vulnerability> Vulnerabilities { get; set; } = new();
}

public class Vulnerability
{
    [JsonPropertyName("title")]
    public string Title { get; set; } = string.Empty;

    [JsonPropertyName("description")]
    public string? Description { get; set; }

    [JsonPropertyName("cve")]
    public string Cve { get; set; } = string.Empty;

    [JsonPropertyName("criticality")]
    public int Criticality { get; set; }
}
