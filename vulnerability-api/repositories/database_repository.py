from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import Session
from models.base import Base  # Import the shared Base
from models.vulnerability import Vulnerability


SQLALCHEMY_DATABASE_URL = "sqlite:///./swissre.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Create database tables
# User.metadata.create_all(bind=engine)
Base.metadata.create_all(bind=engine)

# Dependency to get DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def create_vulnerability(db: Session, vulnerability: Vulnerability):
    db.add(vulnerability)
    db.commit()
    db.refresh(vulnerability)
    return vulnerability


def get_vulnerability_by_cve(db: Session, cve: str):
    return db.query(Vulnerability).filter((Vulnerability.cve == cve) ).first()

def get_all_vulnerabilities(db: Session, title: str = '', min_criticality: int = 0, max_criticality: int = 10):
    query = db.query(Vulnerability)
    
    # Apply title filter if provided
    if title:
        query = query.filter(Vulnerability.title == title)
    
    # Apply criticality range filters
    query = query.filter(Vulnerability.criticality >= min_criticality)
    query = query.filter(Vulnerability.criticality <= max_criticality)
    
    return query.all()
def delete_vulnerability(db: Session, cve: str):
    vulnerability = db.query(Vulnerability).filter(Vulnerability.cve == cve).first()
    if vulnerability:
        db.delete(vulnerability)
        db.commit()
        return vulnerability
    return None


