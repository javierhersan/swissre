from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from models.vulnerability import Vulnerability
from repositories.database_repository import get_db, get_all_vulnerabilities, get_vulnerability_by_cve, create_vulnerability, delete_vulnerability
from pydantic import BaseModel, Field, field_validator
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from typing import List, Optional
import re

# Create the router instance
vulnerability_router = APIRouter()

# Vulnerability models
class VulnerabilityBase(BaseModel):
    title: str = Field(max_length=30)
    cve: str
    criticality: int
    description: str = Field(max_length=100)
    
    @field_validator('cve')
    @classmethod  # This decorator is required in Pydantic V2
    def validate_cve(cls, v):
        if not re.match(r'CVE-\d{4}-\d{4,7}$', v):
            raise ValueError('CVE must match the format CVE-YYYY-NNNNNNN')
        return v
        
    @field_validator('criticality')
    @classmethod  # This decorator is required in Pydantic V2
    def validate_criticality(cls, v):
        if not 0 <= v <= 10:
            raise ValueError('Criticality must be between 0 and 10')
        return v

class CreateVulnerabilityRequest(VulnerabilityBase):
    title: str
    cve: str
    criticality: int
    description: str

class VulnerabilityResponse(VulnerabilityBase):
    title: str
    cve: str
    criticality: int
    description: str

# GET vulnerability by CVE
@vulnerability_router.get("/vulnerability/{cve}", response_model=VulnerabilityResponse)
def get_vulnerability_by_cve_controller(cve: str, db: Session = Depends(get_db)):
    # Validate CVE format
    if not re.match(r'CVE-\d{4}-\d{4,7}$', cve):
        raise HTTPException(status_code=400, detail="Invalid CVE format. Must match CVE-YYYY-NNNNNNN")
    
    # Get vulnerability from repository
    vulnerability = get_vulnerability_by_cve(db, cve)
    if not vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return vulnerability

# GET all vulnerabilities with optional filters
@vulnerability_router.get("/vulnerability", response_model=List[VulnerabilityResponse])
def get_vulnerabilities_controller(
    title: Optional[str] = Query(None, max_length=30),
    min_criticality: Optional[int] = Query(None, ge=0, le=10),
    max_criticality: Optional[int] = Query(None, ge=0, le=10),
    db: Session = Depends(get_db)
):
    title_value = title if title is not None else ''
    min_criticality_value = min_criticality if min_criticality is not None else 0
    max_criticality_value = max_criticality if max_criticality is not None else 10
    # Get vulnerabilities with filters
    vulnerabilities = get_all_vulnerabilities(db, title_value, min_criticality_value, max_criticality_value)
    if not vulnerabilities:
        raise HTTPException(status_code=404, detail="No vulnerabilities found matching the criteria")
    
    return vulnerabilities


# POST create new vulnerability
@vulnerability_router.post("/vulnerability", response_model=VulnerabilityResponse, status_code=status.HTTP_201_CREATED)
def create_vulnerability_controller(body: CreateVulnerabilityRequest, db: Session = Depends(get_db)):
    # Check if vulnerability with same CVE already exists
    existing_vulnerability = get_vulnerability_by_cve(db, body.cve)
    if existing_vulnerability:
        raise HTTPException(status_code=400, detail="Vulnerability with this CVE already exists")
    
    # Create vulnerability
    vulnerability = Vulnerability(
        title=body.title,
        cve=body.cve,
        criticality=body.criticality,
        description=body.description
    )
    new_vulnerability = create_vulnerability(db, vulnerability)
    
    return new_vulnerability

# DELETE vulnerability by CVE
@vulnerability_router.delete("/vulnerability/{cve}", response_model=VulnerabilityResponse)
def delete_vulnerability_controller(cve: str, db: Session = Depends(get_db)):
    # Validate CVE format
    if not re.match(r'CVE-\d{4}-\d{4,7}$', cve):
        raise HTTPException(status_code=400, detail="Invalid CVE format. Must match CVE-YYYY-NNNNNNN")
    
    # Get vulnerability to verify it exists
    vulnerability = get_vulnerability_by_cve(db, cve)
    if not vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    # Delete vulnerability
    deleted_vulnerability = delete_vulnerability(db, cve)
    
    return deleted_vulnerability